"use strict";
function _interopDefault(e) {
  return e && "object" == typeof e && "default" in e ? e.default : e;
}
Object.defineProperty(exports, "__esModule", { value: !0 });
var React = require("react"),
  React__default = _interopDefault(React),
  PropTypes = _interopDefault(require("prop-types")),
  reactFinalForm = require("react-final-form"),
  arrayMutators = _interopDefault(require("final-form-arrays")),
  ReactDOMServer = _interopDefault(require("react-dom/server")),
  memoize = _interopDefault(require("memoize-one")),
  CheckboxAlias = _interopDefault(require("react-bootstrap/lib/Checkbox")),
  Col = _interopDefault(require("react-bootstrap/lib/Col")),
  Row = _interopDefault(require("react-bootstrap/lib/Row")),
  reactBootstrap = require("react-bootstrap"),
  InputGroup = _interopDefault(require("react-bootstrap/lib/InputGroup")),
  Dropzone = _interopDefault(require("react-dropzone")),
  RadioAlias = _interopDefault(require("react-bootstrap/lib/Radio"));
function _extends() {
  return (_extends =
    Object.assign ||
    function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var r = arguments[t];
        for (var o in r)
          Object.prototype.hasOwnProperty.call(r, o) && (e[o] = r[o]);
      }
      return e;
    }).apply(this, arguments);
}
const AppContext = React.createContext({});
class ContextWrapper extends React__default.Component {
  constructor(e, t) {
    super(e, t),
      (this.checkCondition = this.checkCondition.bind(this)),
      (this.getStatus = this.getStatus.bind(this)),
      (this.values = {});
  }
  getStatus() {
    const {
      dirty: e,
      dirtySinceLastSubmit: t,
      error: r,
      errors: o,
      invalid: s,
      pristine: l,
      submitError: p,
      submitErrors: a,
      submitFailed: n,
      submitSucceeded: i,
      submitting: u,
      valid: c,
      validating: d
    } = this.props;
    return {
      dirty: e,
      dirtySinceLastSubmit: t,
      error: r,
      errors: o,
      invalid: s,
      pristine: l,
      submitError: p,
      submitErrors: a,
      submitFailed: n,
      submitSucceeded: i,
      submitting: u,
      valid: c,
      validating: d
    };
  }
  checkCondition(e) {
    const { values: t } = this.props;
    return e(t);
  }
  render() {
    const { debug: e, children: t, listen: r, layout: o } = this.props;
    return e
      ? React__default.createElement(
          AppContext.Provider,
          {
            value: {
              checkCondition: this.checkCondition,
              isStatic: this.props.static,
              debug: e,
              layout: o,
              status: this.getStatus()
            }
          },
          t,
          React__default.createElement(
            reactFinalForm.FormSpy,
            { subscription: { values: !0 } },
            ({ values: e }) => (
              r && 'function"' == typeof r && r(e),
              React__default.createElement("pre", null, JSON.stringify(e, 0, 2))
            )
          )
        )
      : React__default.createElement(
          AppContext.Provider,
          {
            value: {
              checkCondition: this.checkCondition,
              isStatic: this.props.static,
              debug: e,
              layout: o,
              status: this.getStatus()
            }
          },
          t,
          r &&
            "function" == typeof r &&
            React__default.createElement(reactFinalForm.FormSpy, {
              subscription: { values: !0 },
              onChange: e => {
                r(e.values);
              }
            })
        );
  }
}
(ContextWrapper.propTypes = {
  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
  static: PropTypes.bool,
  values: PropTypes.oneOfType([PropTypes.object]),
  debug: PropTypes.bool,
  dirty: PropTypes.bool,
  dirtySinceLastSubmit: PropTypes.bool,
  errors: PropTypes.oneOfType([PropTypes.object]),
  error: PropTypes.bool,
  invalid: PropTypes.bool,
  pristine: PropTypes.bool,
  submitError: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
  submitErrors: PropTypes.oneOfType([PropTypes.object]),
  submitFailed: PropTypes.bool,
  submitSucceeded: PropTypes.bool,
  submitting: PropTypes.bool,
  valid: PropTypes.bool,
  validating: PropTypes.bool,
  listen: PropTypes.func
}),
  (ContextWrapper.defaultProps = { static: !1, debug: !1 });
const Form = e => {
  const {
    children: t,
    className: r,
    debug: o,
    readOnly: s,
    listen: l,
    layout: p,
    ...a
  } = e;
  return React__default.createElement(
    reactFinalForm.Form,
    _extends({}, a, {
      mutators: { ...arrayMutators },
      render: ({ handleSubmit: e, ...a }) =>
        React__default.createElement(
          ContextWrapper,
          _extends({}, a, { debug: o, listen: l, readOnly: s, layout: p }),
          React__default.createElement("form", { onSubmit: e, className: r }, t)
        )
    })
  );
};
function Context(e) {
  return t => {
    const r = r => {
      const o = {};
      return (
        e && void 0 !== e.type && (o.type = e.type),
        React__default.createElement(AppContext.Consumer, null, e =>
          React__default.createElement(
            reactFinalForm.Field,
            _extends(
              {
                name: r.name,
                render: ({ input: o, meta: s }) => {
                  const { type: l, ...p } = o;
                  return React__default.createElement(
                    t,
                    _extends({ input: p, meta: s, context: e }, r)
                  );
                }
              },
              o
            )
          )
        )
      );
    };
    return (r.propTypes = { name: PropTypes.string.isRequired }), r;
  };
}
function fieldGroup(e) {
  const t = t => {
    const {
        label: r,
        addOn: o,
        help: s,
        disabled: l,
        layout: p,
        context: { checkCondition: a, layout: n },
        meta: { submitError: i, submitFailed: u, invalid: c, error: d }
      } = t,
      y = u && c,
      T = l && a(l),
      f = { ...n, ...p };
    return React__default.createElement(
      reactBootstrap.FormGroup,
      { validationState: y ? "error" : null },
      r &&
        React__default.createElement(
          Col,
          _extends({ componentClass: reactBootstrap.ControlLabel }, f.label),
          r
        ),
      React__default.createElement(
        Col,
        f.field,
        (() =>
          null === o
            ? React__default.createElement(
                e,
                _extends({}, t, { computedInvalid: y, isDisabled: T })
              )
            : React__default.createElement(
                InputGroup,
                null,
                React__default.createElement(
                  e,
                  _extends({}, t, { computedInvalid: y, isDisabled: T })
                ),
                "string" == typeof o &&
                  React__default.createElement(InputGroup.addOn, null, o),
                "string" != typeof o && o
              ))(),
        React__default.createElement(reactBootstrap.FormControl.Feedback, null),
        !y &&
          s &&
          React__default.createElement(reactBootstrap.HelpBlock, null, s),
        y &&
          d &&
          React__default.createElement(reactBootstrap.HelpBlock, null, d),
        y &&
          i &&
          React__default.createElement(reactBootstrap.HelpBlock, null, i)
      ),
      React__default.createElement(reactBootstrap.Clearfix, null)
    );
  };
  return (
    (t.propTypes = {
      name: PropTypes.string.isRequired,
      label: PropTypes.string,
      addOn: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
      help: PropTypes.string,
      type: PropTypes.string,
      disabled: PropTypes.func,
      formGroup: PropTypes.string,
      formLabel: PropTypes.string,
      formError: PropTypes.string,
      formText: PropTypes.string,
      layout: PropTypes.shape({
        label: PropTypes.object,
        field: PropTypes.object
      }),
      meta: PropTypes.shape({
        submitFailed: PropTypes.bool.isRequired,
        invalid: PropTypes.bool.isRequired,
        error: PropTypes.string
      }).isRequired,
      context: PropTypes.shape({
        checkCondition: PropTypes.func,
        layout: PropTypes.shape({
          label: PropTypes.object,
          field: PropTypes.object
        })
      }).isRequired
    }),
    (t.defaultProps = {
      label: null,
      addOn: null,
      text: null,
      type: null,
      formGroup: null,
      formLabel: null,
      formError: null,
      formText: null,
      disabled: null,
      layout: { label: { sm: 4 }, field: { sm: 8 } },
      context: { layout: { label: { sm: 4 }, field: { sm: 8 } } }
    }),
    t
  );
}
(Form.propTypes = {
  className: PropTypes.string,
  validate: PropTypes.func,
  onSubmit: PropTypes.func.isRequired,
  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,
  debug: PropTypes.bool,
  readOnly: PropTypes.bool,
  listen: PropTypes.func,
  layout: PropTypes.shape({ label: PropTypes.object, field: PropTypes.object }),
  initialValues: PropTypes.objectOf(
    PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
      PropTypes.array,
      PropTypes.object,
      PropTypes.bool
    ])
  )
}),
  (Form.defaultProps = {
    className: "",
    validate: () => {},
    listen: () => {},
    debug: !1,
    readOnly: !1,
    initialValues: {},
    layout: { label: { sm: 4 }, field: { sm: 8 } }
  });
const Filter = ({
  handleChange: e,
  placeholderFilter: t,
  filterText: r,
  clearFilterText: o,
  isDisabled: s
}) =>
  React__default.createElement(
    "div",
    { className: "input-group" },
    React__default.createElement("input", {
      placeholder: t,
      className: "form-control",
      type: "text",
      onChange: e,
      value: r,
      disabled: s
    }),
    React__default.createElement(
      "span",
      { className: "input-group-btn" },
      React__default.createElement(
        "button",
        {
          disabled: !r || s,
          className: "btn btn-default",
          type: "button",
          onClick: o
        },
        "x"
      )
    )
  );
Filter.propTypes = {
  filterText: PropTypes.string.isRequired,
  placeholderFilter: PropTypes.string.isRequired,
  handleChange: PropTypes.func.isRequired,
  clearFilterText: PropTypes.func.isRequired,
  isDisabled: PropTypes.bool
};
class Checkbox extends React.Component {
  constructor(...e) {
    super(...e),
      (this.state = { values: [], filterText: "" }),
      (this.emit = (e, t, r = !1) => {
        const {
          input: { onChange: o, value: s }
        } = this.props;
        if (r) return e.target.checked ? void o(t) : void o("");
        const l = [...s].filter(e => e);
        if (e.target.checked) {
          if (l.indexOf(t) > -1) return;
          return l.push(t), o(l), !0;
        }
        -1 !== l.indexOf(t) && (l.splice(l.indexOf(t), 1), o(l));
      }),
      (this.filtered = memoize((e, t) =>
        e.filter(
          e =>
            (!t && "option" !== e.type) ||
            ("string" == typeof e.props.children
              ? e.props && "option" === e.type && e.props.children.includes(t)
              : ReactDOMServer.renderToString(e.props.children).includes(t))
        )
      )),
      (this.handleChange = e => {
        this.setState({ filterText: e.target.value });
      }),
      (this.clearFilterText = e => {
        this.setState({ filterText: "" });
      }),
      (this.createCheckBoxes = e => {
        const { columns: t, filter: r, input: o, isDisabled: s } = this.props;
        if (
          e &&
          Array.isArray(e) &&
          React__default.isValidElement(e[0]) &&
          "option" === e[0].type
        ) {
          const r = e.map(e => {
            if ("option" !== e.type) return e;
            const { value: t, children: r } = e.props;
            return React__default.createElement(
              CheckboxAlias,
              {
                key: t,
                disabled: s,
                checked: o.value.indexOf(t) > -1,
                onChange: e => {
                  this.emit(e, t);
                }
              },
              r
            );
          });
          if (1 === t) return r;
          const l = Math.ceil(r.length / t),
            p = Array.apply(null, Array(t))
              .map(() => {})
              .map((e, o) => {
                const s = o * l,
                  p = s + l;
                return React__default.createElement(
                  Col,
                  { sm: Math.round(12 / t), key: o },
                  r.slice(s, p)
                );
              });
          return React__default.createElement(Row, null, p);
        }
        return r
          ? React__default.createElement("div", null, "No results")
          : React__default.createElement(
              CheckboxAlias,
              {
                checked: o.value,
                disabled: s,
                onChange: e => {
                  this.emit(e, !0, !0);
                }
              },
              e
            );
      });
  }
  componentDidMount() {
    const {
      input: { value: e }
    } = this.props;
    void 0 !== e && this.setState({ values: e });
  }
  render() {
    const {
        filter: e,
        placeholderFilter: t,
        children: r,
        isDisabled: o
      } = this.props,
      { filterText: s } = this.state;
    if (e) {
      const e = this.filtered(r, this.state.filterText);
      return React__default.createElement(
        React__default.Fragment,
        null,
        React__default.createElement(Filter, {
          isDisabled: o,
          filterText: s,
          clearFilterText: this.clearFilterText,
          handleChange: this.handleChange,
          placeholderFilter: t
        }),
        this.createCheckBoxes(e)
      );
    }
    return React__default.createElement(
      React__default.Fragment,
      null,
      this.createCheckBoxes(r)
    );
  }
}
(Checkbox.propTypes = {
  input: PropTypes.shape({
    name: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    onBlur: PropTypes.func.isRequired,
    onFocus: PropTypes.func.isRequired,
    value: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.bool,
      PropTypes.number,
      PropTypes.array
    ])
  }),
  children: PropTypes.oneOfType([
    PropTypes.array,
    PropTypes.string,
    PropTypes.object,
    PropTypes.element
  ]),
  disabled: PropTypes.func,
  isDisabled: PropTypes.bool,
  placeholderFilter: PropTypes.string,
  label: PropTypes.string,
  help: PropTypes.string,
  columns: PropTypes.number,
  filter: PropTypes.bool,
  computedInvalid: PropTypes.bool.isRequired,
  layout: PropTypes.shape({ label: PropTypes.object, field: PropTypes.object })
}),
  (Checkbox.defaultProps = {
    input: {},
    children: [],
    label: null,
    help: null,
    columns: 1,
    filter: !1,
    placeholderFilter: "Filter",
    disabled: null,
    isDisabled: !1,
    layout: null
  });
var Checkbox$1 = Context()(fieldGroup(Checkbox));
const Custom = e => {
  const { control: t, input: r, isDisabled: o, children: s } = e;
  return t
    ? React__default.createElement(
        reactBootstrap.FormControl,
        _extends({}, r, { componentClass: s, disabled: o })
      )
    : s(r, o);
};
(Custom.propTypes = {
  input: PropTypes.shape({
    name: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    onBlur: PropTypes.func.isRequired,
    onFocus: PropTypes.func.isRequired,
    value: PropTypes.any
  }),
  disabled: PropTypes.func,
  isDisabled: PropTypes.bool,
  children: PropTypes.func,
  control: PropTypes.bool,
  placeholder: PropTypes.string,
  label: PropTypes.string,
  help: PropTypes.string,
  computedInvalid: PropTypes.bool.isRequired,
  layout: PropTypes.shape({ label: PropTypes.object, field: PropTypes.object })
}),
  (Custom.defaultProps = {
    input: {},
    label: null,
    help: null,
    placeholder: null,
    control: !0,
    disabled: null,
    isDisabled: !1,
    layout: null
  });
var Custom$1 = Context()(fieldGroup(Custom));
class FileUpload extends React__default.Component {
  constructor(...e) {
    super(...e),
      (this.progressElem = null),
      (this.state = { hasError: null, isUploading: !1 });
  }
  static getDerivedStateFromError(e) {
    return { hasError: !0 };
  }
  componentWillUnmount() {
    const { preview: e } = this.state;
    "string" == typeof e && URL.revokeObjectURL(e);
  }
  componentDidMount() {
    const { file: e } = this.props;
    e.type.includes("image/") &&
      this.setState({ preview: URL.createObjectURL(e) });
  }
  componentDidCatch(e, t) {
    console.error(t);
  }
  fileSize(e, t) {
    const r = t ? 1e3 : 1024;
    if (Math.abs(e) < r) return e + " B";
    const o = t
      ? ["kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
      : ["KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"];
    let s = -1;
    do {
      (e /= r), ++s;
    } while (Math.abs(e) >= r && s < o.length - 1);
    return e.toFixed(1) + " " + o[s];
  }
  render() {
    const { file: e, removeFromStack: t } = this.props,
      { hasError: r, preview: o } = this.state;
    return r
      ? React__default.createElement(
          "tr",
          null,
          React__default.createElement(
            "td",
            { colSpan: 4 },
            React__default.createElement(
              "div",
              { className: "file-upload-error" },
              "There was an error, try again or contact the site owner."
            )
          )
        )
      : React__default.createElement(
          "tr",
          null,
          React__default.createElement(
            "td",
            { className: "file-upload-name" },
            "string" == typeof o &&
              React__default.createElement("img", {
                src: o,
                alt: e.name,
                className: "img-thumbnail",
                style: { maxWidth: "80px" }
              })
          ),
          React__default.createElement(
            "td",
            null,
            e.name,
            "(",
            this.fileSize(e.size),
            ")"
          ),
          React__default.createElement(
            "td",
            { className: "file-upload-delete" },
            React__default.createElement(
              "button",
              {
                className: "file-upload-delete-button",
                type: "button",
                onClick: () => {
                  t(e);
                }
              },
              "x"
            )
          )
        );
  }
}
(FileUpload.propTypes = {
  file: PropTypes.shape({
    name: PropTypes.string.isRequired,
    size: PropTypes.number.isRequired,
    type: PropTypes.string.isRequired
  }).isRequired,
  endPoint: PropTypes.shape({
    path: PropTypes.string.isRequired,
    headers: PropTypes.shape({})
  }),
  removeFromStack: PropTypes.func.isRequired,
  addOnStack: PropTypes.func.isRequired
}),
  (FileUpload.defaultProps = {
    endPoint: { headers: { "Content-Type": "multipart/form-data" } }
  });
class DropZone extends React__default.Component {
  constructor(...e) {
    super(...e),
      (this.state = { queue: [], upload: !1 }),
      (this.filesFromClient = e => {
        const { queue: t } = this.state,
          {
            input: { onChange: r }
          } = this.props,
          o = [...t];
        e.forEach(e => {
          o.push(e);
        }),
          this.setState({ queue: o }),
          r(o);
      }),
      (this.removeFromStack = e => {
        const { queue: t } = this.state,
          { input: r } = this.props,
          o = t.filter(t => t.name !== e.name);
        r.onChange(o), this.setState({ queue: o });
      }),
      (this.displayFiles = () => {
        const { queue: e, upload: t } = this.state,
          { endPoint: r, autoUpload: o } = this.props;
        if (0 === e.length) return null;
        const s = e.map((e, s) =>
          React__default.createElement(FileUpload, {
            key: `${e.name}-${s}`,
            file: e,
            removeFromStack: this.removeFromStack,
            endPoint: r,
            upload: o || t
          })
        );
        return React__default.createElement(
          "table",
          { className: "table" },
          React__default.createElement("tbody", null, s)
        );
      });
  }
  shouldComponentUpdate(e, t) {
    const { queue: r } = this.state;
    return r !== t.queue;
  }
  render() {
    return React__default.createElement(
      React__default.Fragment,
      null,
      React__default.createElement(
        Dropzone,
        { onDrop: this.filesFromClient },
        ({ getRootProps: e, getInputProps: t }) =>
          React__default.createElement(
            "section",
            { className: "file-upload-dropzone" },
            React__default.createElement(
              "div",
              e(),
              React__default.createElement("input", t()),
              React__default.createElement(
                "button",
                { type: "button", className: "btn btn-primary" },
                "select files..."
              )
            )
          )
      ),
      this.displayFiles()
    );
  }
}
(DropZone.propTypes = {
  input: PropTypes.oneOfType([PropTypes.object]),
  placeholder: PropTypes.string,
  endPoint: PropTypes.shape({
    path: PropTypes.string.isRequired,
    headers: PropTypes.shape({})
  }).isRequired,
  disabled: PropTypes.func,
  isDisabled: PropTypes.bool,
  formControl: PropTypes.string,
  computedInvalid: PropTypes.bool.isRequired,
  layout: PropTypes.shape({ label: PropTypes.object, field: PropTypes.object })
}),
  (DropZone.defaultProps = {
    input: {},
    placeholder: null,
    formControl: null,
    autoUpload: !1,
    disabled: null,
    isDisabled: !1,
    layout: null
  });
var DropZone$1 = Context()(fieldGroup(DropZone));
const Password = e => {
  const { input: t, isDisabled: r } = e;
  return React__default.createElement(
    reactBootstrap.FormControl,
    _extends({}, t, { type: "password", disabled: r })
  );
};
(Password.propTypes = {
  input: PropTypes.shape({
    name: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    onBlur: PropTypes.func.isRequired,
    onFocus: PropTypes.func.isRequired,
    value: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.bool,
      PropTypes.number
    ])
  }),
  disabled: PropTypes.func,
  isDisabled: PropTypes.bool,
  placeholder: PropTypes.string,
  label: PropTypes.string,
  help: PropTypes.string,
  computedInvalid: PropTypes.bool.isRequired,
  layout: PropTypes.shape({ label: PropTypes.object, field: PropTypes.object })
}),
  (Password.defaultProps = {
    input: {},
    label: null,
    help: null,
    placeholder: null,
    disabled: null,
    isDisabled: !1,
    layout: null
  });
var Password$1 = Context()(fieldGroup(Password));
class Radio extends React.Component {
  constructor(...e) {
    super(...e),
      (this.state = { values: [], filterText: "" }),
      (this.emit = (e, t) => {
        const {
          input: { onChange: r }
        } = this.props;
        r(t);
      }),
      (this.filtered = memoize((e, t) =>
        e.filter(
          e =>
            !t ||
            "option" !== e.type ||
            ("string" == typeof e.props.children
              ? e.props && "option" === e.type && e.props.children.includes(t)
              : ReactDOMServer.renderToString(e.props.children).includes(t))
        )
      )),
      (this.handleChange = e => {
        this.setState({ filterText: e.target.value });
      }),
      (this.clearFilterText = e => {
        this.setState({ filterText: "" });
      }),
      (this.createRadios = e => {
        const { columns: t, filter: r, input: o, isDisabled: s } = this.props;
        if (
          e &&
          Array.isArray(e) &&
          React__default.isValidElement(e[0]) &&
          "option" === e[0].type
        ) {
          const r = e.map(e => {
            if ("option" !== e.type) return e;
            const { value: t, children: r } = e.props;
            return React__default.createElement(
              RadioAlias,
              {
                key: t,
                disabled: s,
                checked: o.value === t,
                onChange: e => {
                  this.emit(e, t);
                }
              },
              r
            );
          });
          if (1 === t) return r;
          const l = Math.ceil(r.length / t),
            p = Array.apply(null, Array(t))
              .map(() => {})
              .map((e, o) => {
                const s = o * l,
                  p = s + l;
                return React__default.createElement(
                  Col,
                  { sm: Math.round(12 / t), key: o },
                  r.slice(s, p)
                );
              });
          return React__default.createElement(Row, null, p);
        }
        return r
          ? React__default.createElement("div", null, "No results")
          : React__default.createElement(
              RadioAlias,
              {
                checked: o.value,
                disabled: s,
                onChange: e => {
                  this.emit(e, !0, !0);
                }
              },
              e
            );
      });
  }
  componentDidMount() {
    const {
      input: { value: e }
    } = this.props;
    void 0 !== e && this.setState({ values: e });
  }
  render() {
    const {
        filter: e,
        placeholderFilter: t,
        children: r,
        isDisabled: o
      } = this.props,
      { filterText: s } = this.state;
    if (e) {
      const e = this.filtered(r, this.state.filterText);
      return React__default.createElement(
        React__default.Fragment,
        null,
        React__default.createElement(Filter, {
          filterText: s,
          clearFilterText: this.clearFilterText,
          handleChange: this.handleChange,
          placeholderFilter: t,
          isDisabled: o
        }),
        this.createRadios(e)
      );
    }
    return React__default.createElement(
      React__default.Fragment,
      null,
      this.createRadios(r)
    );
  }
}
(Radio.propTypes = {
  input: PropTypes.shape({
    name: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    onBlur: PropTypes.func.isRequired,
    onFocus: PropTypes.func.isRequired,
    value: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.bool,
      PropTypes.number,
      PropTypes.array
    ])
  }),
  children: PropTypes.oneOfType([
    PropTypes.array,
    PropTypes.string,
    PropTypes.object,
    PropTypes.element
  ]),
  disabled: PropTypes.func,
  isDisabled: PropTypes.bool,
  placeholderFilter: PropTypes.string,
  label: PropTypes.string,
  help: PropTypes.string,
  columns: PropTypes.number,
  filter: PropTypes.bool,
  computedInvalid: PropTypes.bool.isRequired,
  layout: PropTypes.shape({ label: PropTypes.object, field: PropTypes.object })
}),
  (Radio.defaultProps = {
    input: {},
    children: [],
    label: null,
    help: null,
    columns: 1,
    filter: !1,
    placeholderFilter: "Filter",
    disabled: null,
    isDisabled: !1,
    layout: null
  });
var Radio$1 = Context()(fieldGroup(Radio));
const Select = e => {
  const { input: t, children: r, isDisabled: o, multiple: s } = e;
  return React__default.createElement(
    reactBootstrap.FormControl,
    _extends({}, t, { componentClass: "select", disabled: o, multiple: s }),
    r
  );
};
(Select.propTypes = {
  input: PropTypes.shape({
    name: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    onBlur: PropTypes.func.isRequired,
    onFocus: PropTypes.func.isRequired,
    value: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.bool,
      PropTypes.number,
      PropTypes.array
    ])
  }),
  children: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.element),
    PropTypes.element
  ]),
  disabled: PropTypes.func,
  isDisabled: PropTypes.bool,
  placeholder: PropTypes.string,
  label: PropTypes.string,
  help: PropTypes.string,
  computedInvalid: PropTypes.bool.isRequired,
  multiple: PropTypes.bool,
  layout: PropTypes.shape({ label: PropTypes.object, field: PropTypes.object })
}),
  (Select.defaultProps = {
    input: {},
    label: null,
    help: null,
    placeholder: null,
    multiple: !1,
    disabled: null,
    isDisabled: !1,
    layout: null
  });
var Select$1 = Context({ type: "select" })(fieldGroup(Select));
const Show = ({
  condition: e,
  children: t,
  context: { checkCondition: r }
}) => {
  if (e && "function" == typeof e) return !0 !== r(e) ? null : t;
};
Show.propTypes = {
  children: PropTypes.oneOfType([
    PropTypes.object,
    PropTypes.array,
    PropTypes.string
  ]).isRequired,
  hidden: PropTypes.func,
  condition: PropTypes.func
};
var Show$1 = Context()(Show);
const Input = e => {
  const { input: t, type: r, isDisabled: o } = e;
  return React__default.createElement(
    reactBootstrap.FormControl,
    _extends({}, t, { type: r, disabled: o })
  );
};
(Input.propTypes = {
  input: PropTypes.shape({
    name: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    onBlur: PropTypes.func.isRequired,
    onFocus: PropTypes.func.isRequired,
    value: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.bool,
      PropTypes.number
    ])
  }),
  disabled: PropTypes.func,
  isDisabled: PropTypes.bool,
  placeholder: PropTypes.string,
  addOn: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  label: PropTypes.string,
  help: PropTypes.string,
  computedInvalid: PropTypes.bool.isRequired,
  type: PropTypes.oneOf([
    "text",
    "email",
    "date",
    "datetime-local",
    "checkbox"
  ]),
  layout: PropTypes.shape({ label: PropTypes.object, field: PropTypes.object })
}),
  (Input.defaultProps = {
    input: {},
    label: null,
    help: null,
    addOn: null,
    placeholder: null,
    type: "text",
    disabled: null,
    isDisabled: !1,
    layout: null
  });
var Input$1 = Context()(fieldGroup(Input));
function Context$1(e) {
  return t =>
    React__default.createElement(AppContext.Consumer, null, r =>
      React__default.createElement(e, _extends({ context: r }, t))
    );
}
const Error = e => {
  const {
    children: t,
    context: {
      status: { submitFailed: r, submitError: o }
    }
  } = e;
  return r
    ? React__default.createElement(
        reactBootstrap.Alert,
        { bsStyle: "danger" },
        t,
        React__default.createElement("div", null, o)
      )
    : null;
};
var _Error = Context$1(Error);
const Success = e => {
  const {
    children: t,
    context: {
      status: { submitSucceeded: r }
    }
  } = e;
  return r
    ? React__default.createElement(
        reactBootstrap.Alert,
        { bsStyle: "success" },
        t
      )
    : null;
};
var Success$1 = Context$1(Success);
const Textarea = e => {
  const { input: t, type: r, isDisabled: o, rows: s, cols: l } = e;
  return React__default.createElement(
    reactBootstrap.FormControl,
    _extends({ componentClass: "textarea" }, t, {
      type: r,
      rows: s,
      cols: l,
      disabled: o
    })
  );
};
(Textarea.propTypes = {
  input: PropTypes.shape({
    name: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    onBlur: PropTypes.func.isRequired,
    onFocus: PropTypes.func.isRequired,
    value: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.bool,
      PropTypes.number
    ])
  }),
  rows: PropTypes.number,
  cols: PropTypes.number,
  disabled: PropTypes.func,
  isDisabled: PropTypes.bool,
  placeholder: PropTypes.string,
  addOn: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  label: PropTypes.string,
  help: PropTypes.string,
  computedInvalid: PropTypes.bool.isRequired,
  layout: PropTypes.shape({ label: PropTypes.object, field: PropTypes.object })
}),
  (Textarea.defaultProps = {
    input: {},
    label: null,
    help: null,
    addOn: null,
    rows: null,
    cols: null,
    placeholder: null,
    type: "text",
    disabled: null,
    isDisabled: !1,
    layout: null
  });
var Textarea$1 = Context()(fieldGroup(Textarea));
(exports.Checkbox = Checkbox$1),
  (exports.Custom = Custom$1),
  (exports.DropZone = DropZone$1),
  (exports.Error = _Error),
  (exports.Form = Form),
  (exports.Input = Input$1),
  (exports.Password = Password$1),
  (exports.Radio = Radio$1),
  (exports.Select = Select$1),
  (exports.Show = Show$1),
  (exports.Success = Success$1),
  (exports.Textarea = Textarea$1);
